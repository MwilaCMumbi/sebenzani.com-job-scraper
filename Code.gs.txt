/**
 * =================================================================
 * Sebenzani Final Engine - Backend (Code.gs) - LAYER 3: USER LOGINS
 * =================================================================
 */

/**
 * Main function that serves the web application.
 */
function doGet() {
  return HtmlService.createHtmlOutputFromFile('Index')
    .setTitle("Sebenzani.com - Zambian Job Portal")
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

/**
 * =================================================================
 * NEW: User Authentication & Data Functions
 * =================================================================
 */

/**
 * This is the new main data function. It gets the user's status first,
 * then gets the appropriate data for them.
 */
function getInitialData() {
  const user = getSessionUser(); // Get user status
  const content = getPageContent(); // Get page content
  const jobs = getJobData(user.isLoggedIn); // Get jobs based on login status
  
  return {
    jobs: jobs,
    content: content,
    user: user
  };
}

/**
 * Gets job data based on a user's login status.
 * @param {boolean} isLoggedIn - True if the user is logged in, false otherwise.
 */
function getJobData(isLoggedIn) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("Jobs");
    if (!sheet || sheet.getLastRow() < 2) return [];

    const values = sheet.getRange(2, 1, sheet.getLastRow() - 1, 5).getValues();
    const formulas = sheet.getRange(2, 4, sheet.getLastRow() - 1, 1).getFormulas();

    for (let i = 0; i < values.length; i++) {
      if (formulas[i] && formulas[i][0]) {
        values[i][3] = formulas[i][0];
      }
    }

    if (isLoggedIn) {
      // Logged-in users see all jobs, newest first.
      return values;
    } else {
      // Guests see only the 5 oldest jobs to entice sign-up.
      return values.reverse().slice(0, 5);
    }
  } catch (e) {
    console.error("Error in getJobData: " + e.toString());
    return [];
  }
}

/**
 * Checks the user's Google Account session. If they are not in our
 * Users sheet yet, it adds them as a new user.
 */
function getSessionUser() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const usersSheet = ss.getSheetByName("Users");
    const email = Session.getActiveUser().getEmail();

    // If user is not logged into a Google Account at all.
    if (!email) {
      return { isLoggedIn: false, email: "guest", isAdmin: false, name: "Guest" };
    }
    
    // Look for the user in our sheet.
    // Make sure the range is correct if your sheet has more or fewer columns.
    const usersData = usersSheet.getRange(2, 1, usersSheet.getLastRow() -1, 3).getValues();
    for (let user of usersData) {
      if (user[0] && user[0].toLowerCase() === email.toLowerCase()) {
        return {
          isLoggedIn: true,
          email: user[0],
          name: user[1],
          isAdmin: user[2] && user[2].toLowerCase() === 'admin'
        };
      }
    }

    // If the loop finishes and the user wasn't found, add them.
    usersSheet.appendRow([email, "New User", "User"]);
    return { isLoggedIn: true, email: email, name: "New User", isAdmin: false };

  } catch (e) {
    // This handles cases where user denies permission or sheet doesn't exist.
    return { isLoggedIn: false, email: "guest", isAdmin: false, name: "Guest" };
  }
}

/**
 * Reads data from the 'Content' sheet. (Unchanged)
 */
function getPageContent() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("Content");
    if (!sheet || sheet.getLastRow() < 2) return {};
    
    const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, 2).getValues();
    const content = {};
    for (let row of data) {
      if (row[0]) {
        content[row[0]] = row[1];
      }
    }
    return content;
  } catch (e) {
    console.error("Error in getPageContent: " + e.toString());
    return {};
  }
}

/**
 * =================================================================
 * THE SCRAPER ENGINE (RUNS ON A TRIGGER) - UNCHANGED
 * =================================================================
 */
function runJobScraper() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const jobsSheet = ss.getSheetByName("Jobs");
  
  console.log("--- Starting the job scraper function ---");
  if (!jobsSheet) {
    console.error("CRITICAL ERROR: The 'Jobs' sheet was not found.");
    return;
  }
  
  if (jobsSheet.getLastRow() > 1) {
    jobsSheet.getRange(2, 1, jobsSheet.getLastRow() - 1, jobsSheet.getLastColumn()).clearContent();
  }

  const searchUrl = "https://www.linkedin.com/jobs/jobs-in-zambia?f_TPR=r604800";
  const params = { 'headers': { 'Accept-Language': 'en-US,en;q=0.9' } };
  
  try {
    const htmlContent = UrlFetchApp.fetch(searchUrl, params).getContentText();
    const listHtmlMatch = htmlContent.match(/<ul class="jobs-search__results-list">([\s\S]*?)<\/ul>/);
    if (!listHtmlMatch) {
      console.error("CRITICAL FAILURE (Parse): Could not find job list container.");
      return;
    }

    const jobCards = listHtmlMatch[1].split('</li>');
    const jobsToAdd = [];
    for (let card of jobCards) {
      const jobIdMatch = card.match(/data-entity-urn="urn:li:jobPosting:(\d+)"/);
      const titleMatch = card.match(/<h3 class="base-search-card__title">([\s\S]*?)<\/h3>/);
      if (jobIdMatch && titleMatch) {
        const companyMatch = card.match(/<h4 class="base-search-card__subtitle">([\s\S]*?)<\/h4>/);
        const locationMatch = card.match(/<span class="job-search-card__location">([\s\S]*?)<\/span>/);
        const dateMatch = card.match(/<time class="job-search-card__listdate"[^>]*>([\s\S]*?)<\/time>/);
        const jobTitle = titleMatch[1].replace(/<[^>]*>/g, '').trim();
        const company = companyMatch ? companyMatch[1].replace(/<[^>]*>/g, '').trim() : 'N/A';
        const location = locationMatch ? locationMatch[1].replace(/<[^>]*>/g, '').trim() : 'N/A';
        const datePosted = dateMatch ? dateMatch[1].replace(/<[^>]*>/g, '').trim() : 'N/A';
        const cleanUrl = `https://www.linkedin.com/jobs/view/${jobIdMatch[1]}`;
        const linkFormula = `=HYPERLINK("${cleanUrl}", "View Job")`;
        jobsToAdd.push([jobTitle, company, location, linkFormula, datePosted]);
      }
    }
    
    if (jobsToAdd.length > 0) {
      jobsSheet.getRange(2, 1, jobsToAdd.length, 5).setValues(jobsToAdd);
      console.log(`SUCCESS! Wrote ${jobsToAdd.length} new jobs to the 'Jobs' sheet.`);
    }
  } catch (e) {
    console.error("FATAL ERROR during scraping process: " + e.toString());
  }
}